// database
datasource db {
  provider  = "postgres"
  url       = env("SUPA_URL")
  directUrl = env("SUPA_DIRECT_URL")
}

// generator
generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
  previewFeatures      = ["relationJoins"]
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum SkillLevel {
    BEGINNER
    INTERMEDIATE
    ADVANCED
    PRO
}

enum NotificationType {
    MATCH
    DIRECT_CHAT
    GROUP_CHAT
}

// ================ All in One Route/Service ================
model Users {
  id                Int             @id @default(autoincrement()) @map("user_id")
  email             String          @db.VarChar(50) @unique
  password          String
  provider_id       String?         @db.VarChar(255) @unique
  chats_sent        UserChat[]      @relation("SenderChats")
  chats_received    UserChat[]      @relation("ReceiverChats")
  messages          Message[]  
  match_users       MatchUser[]  
  group_users       GroupUser[] 
  created_groups    GroupChat[]     @relation("CreatedGroups")
  notifications     Notifications[] 
  read_messages     ReadMessage[] 
  reviews_given     UserReviews[]   @relation("GivenReviews")
  reviews_received  UserReviews[]   @relation("ReceivedReviews")
  first_name        String
  last_name         String
  birth_date        DateTime
  gender            Gender
  bio               String
  profile_pic       String
  is_verified       Boolean         @default(false)
  preferred_sports  Int[]
  created_at        DateTime        @default(now())
  location          String
  location_lat      Float
  location_long     Float
}
// ================ All in One Route/Service ================


model UserReviews {
  id             Int      @id @default(autoincrement()) @map("team_id")
  reviewed_to_id Int
  reviewed_by_id Int
  rating         Int      @db.SmallInt
  message        String
  match_id       Int
  reviewed_at    DateTime @default(now())
  reviewed_to    Users    @relation("ReceivedReviews", fields: [reviewed_to_id], references: [id], onDelete: Cascade)
  reviewed_by    Users    @relation("GivenReviews", fields: [reviewed_by_id], references: [id], onDelete: Cascade)
  match          Match    @relation(fields: [match_id], references: [id], onDelete: Cascade)
}

model Sport {
  id          Int      @id @default(autoincrement()) @map("sport_id")
  sport_name  String   @db.VarChar(50)
  description String   @db.VarChar(100)
  rules       String   @db.VarChar(100)
  matches     Match[]
}


model UserChat {
  id          Int       @id @default(autoincrement()) @map("chat_id")
  member1_id  Int
  member2_id  Int
  room_id     String
  created_at  DateTime  @default(now())
  member1     Users     @relation("SenderChats", fields: [member1_id], references: [id], onDelete: Cascade)
  member2     Users     @relation("ReceiverChats", fields: [member2_id], references: [id], onDelete: Cascade)
  messages    Message[]
}

model ReadMessage{
  id            Int         @id @default(autoincrement()) @map("read_message_id")
  sent_to_id    Int
  message_id    Int
  is_read       Boolean     @default(false)
  read_at       DateTime?
  sent_to       Users       @relation(fields: [sent_to_id], references: [id], onDelete: Cascade)
  message       Message     @relation(fields: [message_id], references: [id], onDelete: Cascade)
}

model Message {
  id            Int         @id @default(autoincrement()) @map("message_id")
  user_chat_id  Int?
  sender_id     Int
  content       String
  group_chat_id Int?
  is_deleted    Boolean     @default(false)
  sent_at       DateTime    @default(now())
  chat          UserChat?   @relation(fields: [user_chat_id], references: [id], onDelete: Cascade)
  sender        Users       @relation(fields: [sender_id], references: [id], onDelete: Cascade)
  group_chat    GroupChat?  @relation(fields: [group_chat_id], references: [id], onDelete: Cascade)
  read_messages ReadMessage[]
}

model GroupChat {
  id           Int         @id @default(autoincrement()) @map("group_chat_id")
  created_by   Int
  gc_name      String
  group_pic    String?
  created_at   DateTime?   @default(now())
  creator      Users       @relation("CreatedGroups", fields: [created_by], references: [id], onDelete: Cascade)
  group_users  GroupUser[]
  messages     Message[]
}

model GroupUser {
  id            Int       @id @default(autoincrement()) @map("group_chat_user_id")
  group_chat_id Int
  user_id       Int
  is_pending    Boolean
  is_on_mute    Boolean   @default(false)
  joined_at     DateTime? @default(now())
  group_chat    GroupChat @relation(fields: [group_chat_id], references: [id], onDelete: Cascade)
  user          Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Match {
  id                  Int         @id @default(autoincrement()) @map("match_id")
  sport_id            Int
  user_id             Int
  description         String
  location            String
  location_lat        Float
  location_long       Float
  match_start_date    DateTime
  match_end_date      DateTime
  gender_preference   Gender
  skill_level         SkillLevel
  created_at          DateTime    @default(now())
  updated_at          DateTime
  sport               Sport       @relation(fields: [sport_id], references: [id], onDelete: Cascade)
  match_users         MatchUser[]
  reviews             UserReviews[]
}

model MatchUser {
  id        Int      @id @default(autoincrement()) @map("match_user_id")
  match_id  Int
  user_id   Int
  attended  Boolean? // Null first and will be updated to true or false after match
  is_host   Boolean  @default(false)
  match     Match    @relation(fields: [match_id], references: [id], onDelete: Cascade)
  user      Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Notifications {
  id            Int      @id @default(autoincrement()) @map("notification_id")
  notif_to_id   Int
  // notif from can be id of match, team, user, group
  notif_from_id Int?
  message       String
  type          NotificationType
  redirect_link String?
  notified_at   DateTime @default(now())
  notif_to      Users    @relation(fields: [notif_to_id], references: [id], onDelete: Cascade)
}
