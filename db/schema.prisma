// database
datasource db {
  provider  = "postgres"
  url       = env("SUPA_URL")
  directUrl = env("SUPA_DIRECT_URL")
}

// generator
generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
  previewFeatures      = ["relationJoins"]
}

model Users {
  id              Int         @id @default(autoincrement()) @map("user_id")
  username        String      @db.VarChar(20)
  email           String      @db.VarChar(50)
  password        String
  location        String
  profile_pic     String
  rank            Int         @default(0)
  is_verified     Boolean     @default(false)
  role            String
  chats_sent      UserChat[]  @relation("SenderChats")
  chats_received  UserChat[]  @relation("ReceiverChats")
  messages        Message[]
  match_users     MatchUser[]
  teams           Team[]
  team_users      TeamUser[]
  group_users     GroupUser[]
  created_groups  GroupChat[] @relation("CreatedGroups")
  teams_leader    Team[]      @relation("LeaderOfTeam")
  notifications   Notifications[]
  read_messages   ReadMessage[]
}

model Sport {
  id          Int      @id @default(autoincrement()) @map("sport_id")
  sport_name  String   @db.VarChar(50)
  description String   @db.VarChar(100)
  rules       String   @db.VarChar(100)
  matches     Match[]
}


model UserChat {
  id          Int       @id @default(autoincrement()) @map("chat_id")
  sender_id   Int
  receiver_id Int
  room_id     String
  created_at  DateTime  @default(now())
  sender      Users     @relation("SenderChats", fields: [sender_id], references: [id])
  receiver    Users     @relation("ReceiverChats", fields: [receiver_id], references: [id])
  messages    Message[]
}

model ReadMessage{
  id            Int         @id @default(autoincrement()) @map("read_message_id")
  sent_to_id    Int
  message_id    Int
  is_read       Boolean     @default(false)
  read_at       DateTime?
  sent_to       Users       @relation(fields: [sent_to_id], references: [id])
  message       Message     @relation(fields: [message_id], references: [id])
}

model Message {
  id            Int         @id @default(autoincrement()) @map("message_id")
  user_chat_id  Int?
  sender_id     Int
  content       String
  group_chat_id Int?
  is_deleted    Boolean     @default(false)
  sent_at       DateTime    @default(now())
  chat          UserChat?   @relation(fields: [user_chat_id], references: [id])
  sender        Users       @relation(fields: [sender_id], references: [id])
  group_chat    GroupChat?  @relation(fields: [group_chat_id], references: [id])
  read_messages ReadMessage[]
}

model GroupChat {
  id           Int         @id @default(autoincrement()) @map("group_chat_id")
  created_by   Int
  gc_name      String
  group_pic    String?
  created_at   DateTime?   @default(now())
  creator      Users       @relation("CreatedGroups", fields: [created_by], references: [id])
  group_users  GroupUser[]
  messages     Message[]
}

model GroupUser {
  id            Int       @id @default(autoincrement()) @map("group_chat_user_id")
  group_chat_id Int
  user_id       Int
  is_pending    Boolean
  is_on_mute    Boolean   @default(false)
  joined_at     DateTime? @default(now())
  group_chat    GroupChat @relation(fields: [group_chat_id], references: [id])
  user          Users     @relation(fields: [user_id], references: [id])
}

model Match {
  id            Int         @id @default(autoincrement()) @map("match_id")
  sport_id      Int
  location      String
  start_time    DateTime    @default(now())
  end_time      DateTime    @default(now())
  skill_level   Int
  match_type    String
  accessibility Boolean
  sport         Sport       @relation(fields: [sport_id], references: [id])
  match_users   MatchUser[]
  team_matches  TeamMatch[]
}

model MatchUser {
  id        Int      @id @default(autoincrement()) @map("match_user_id")
  match_id  Int
  user_id   Int
  role      String   @db.VarChar(50)
  match     Match    @relation(fields: [match_id], references: [id])
  user      Users    @relation(fields: [user_id], references: [id])
}

model Team {
  id           Int         @id @default(autoincrement()) @map("team_id")
  team_name    String      @db.VarChar(50)
  coach_id     Int?
  xp           Int         @default(0)
  rank         Int         @default(1)
  leader_id    Int
  leader       Users       @relation("LeaderOfTeam", fields: [leader_id], references: [id])
  coach        Users?      @relation(fields: [coach_id], references: [id])
  team_users   TeamUser[]
  team_matches TeamMatch[]
}

model TeamUser {
  id      Int   @id @default(autoincrement()) @map("team_user_id")
  team_id Int
  user_id Int
  team    Team  @relation(fields: [team_id], references: [id])
  user    Users @relation(fields: [user_id], references: [id])
}

model TeamMatch {
  id       Int   @id @default(autoincrement()) @map("team_match_id")
  team_id  Int
  match_id Int
  team     Team  @relation(fields: [team_id], references: [id])
  match    Match @relation(fields: [match_id], references: [id])
}

model Notifications {
  id            Int      @id @default(autoincrement()) @map("notification_id")
  notif_to_id   Int
  // notif from can be id of match, team, user, group
  notif_from_id Int?
  message       String
  type          String
  redirect_link String?
  notified_at   DateTime @default(now())
  notif_to      Users    @relation(fields: [notif_to_id], references: [id])
}
